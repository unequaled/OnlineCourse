http://www.codeskulptor.org/#user32_HNxJi69hKd_16.py

# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5

rock_list = []
missile_list = []

ANGLE_ACC = 0.002
VEL_ACC = 0.2
FLAC = 0.02
MISSILE_SPEED = 3

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.s2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")

explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    global FLAC,WIDTH,HEIGHT
    
    def __init__(self, pos, vel, angle, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
        self.move =False
        self.acc = 0
        self.angle_acc = 0
        self.sound = sound
               
    def draw(self,canvas): 
        if self.move:
            canvas.draw_image(self.image, [self.image_center[0]+self.image_size[0],self.image_center[1]], self.image_size, [self.pos[0] , self.pos[1] ], self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, [self.pos[0] , self.pos[1] ], self.image_size, self.angle)
        

    def update(self):
        self.angle += self.angle_vel
        self.angle_vel += self.angle_acc
        self.angle_vel -= self.angle_vel*FLAC
        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        self.vel[0] += self.acc*angle_to_vector(self.angle)[0]
        self.vel[1] += self.acc*angle_to_vector(self.angle)[1]
        self.vel[0] -= self.vel[0]*FLAC
        self.vel[1] -= self.vel[1]*FLAC
        
        self.pos[0]%= WIDTH
        self.pos[1]%= HEIGHT
        
    def set_angle_vel(self, value):
        self.angle_acc = value        
    
    def set_acc(self, acc):
        self.acc = acc
        if acc != 0:
            self.sound.rewind()   
            self.sound.play()
        else:        	
            self.sound.pause()
        
    def set_move(self, move):
        self.move = move
        
    def get_shiphead(self):
        return [self.pos[0] + self.radius*angle_to_vector(self.angle)[0], self.pos[1] + self.radius*angle_to_vector(self.angle)[1]]
        
        
    def get_missilevel(self):       
        factor = math.sqrt( self.vel[0]**2 +  self.vel[1] **2) + MISSILE_SPEED
        return [angle_to_vector(self.angle)[0]*factor,angle_to_vector(self.angle)[1]*factor]
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, [self.pos[0] + self.image_center[0], self.pos[1] + self.image_center[1]], self.image_size, self.angle)
        
    def update(self):
        self.angle += self.angle_vel        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
        self.pos[0]%= WIDTH
        self.pos[1]%= HEIGHT
           
def draw(canvas):
    global time,rock_list,missile_list, lives, score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Lives = " + str(lives), (20, 20), 20, 'White')
    canvas.draw_text("Score = " + str(score), (WIDTH -100, 20), 20, 'White')
    # draw ship and sprites
    my_ship.draw(canvas)   
    
    for rock in rock_list:
        rock.draw(canvas)
        rock.update()
    
    # update ship and sprites
    for missile in missile_list:
        missile.draw(canvas)
        missile.update()
    
    my_ship.update()
    
            
# timer handler that spawns a rock    
def rock_spawner():
    global rock_list
    if len(rock_list) > 0 :
        rock_list.pop()
    rock_list.append(Sprite([random.randrange(WIDTH), random.randrange(HEIGHT)], [random.randrange(-50,50)/100.0, random.randrange(-50,50)/100.0], 0, (random.randrange(-10,10)/1000.0), asteroid_image, asteroid_info))
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info,ship_thrust_sound)

# register handlers
def keydown(key):
    global my_ship,missile_list
    if key == 38:
        my_ship.set_acc(VEL_ACC)        
        my_ship.set_move(True)
    elif key == 40:
        my_ship.set_acc(-VEL_ACC)        
        my_ship.set_move(True)
    elif key == 37:         
        my_ship.set_angle_vel(-ANGLE_ACC)
    elif key == 39:
        my_ship.set_angle_vel(ANGLE_ACC)
    elif key == 32:
        if len(missile_list) > 0 :
            missile_list.pop()
        missile_list.append(Sprite(my_ship.get_shiphead(), my_ship.get_missilevel(), 0, 0, missile_image, missile_info, missile_sound))
    
def keyup(key):
    if key == 38:
        my_ship.set_acc(0)        
        my_ship.set_move(False)
    elif key == 40:
        my_ship.set_acc(0)        
        my_ship.set_move(False)
    elif key == 37:         
        my_ship.set_angle_vel(0)
    elif key == 39:
        my_ship.set_angle_vel(0)


frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
