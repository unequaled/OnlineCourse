# implementation of card game - Memory

import simplegui
import random
numbers = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]
status  = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
click = 0
turn = 0
openedcard1 = -1
openedcard2 = -1

# helper function to initialize globals
def new_game():
    global numbers,click,status,openedcard,turn
    random.shuffle(numbers)
    click = 0
    turn = 0
    label.set_text("Turns = " + str(turn))
    openedcard1 = -1
    openedcard2 = -1
    status = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]   
     
# define event handlers
def mouseclick(pos):
    global status, click, openedcard1 ,openedcard2, turn, numbers, label
    if click == 0 and status[pos[0]/50] == 0:
        status[pos[0]/50] = 1
        openedcard1 = pos[0]/50
        click += 1        
    elif click == 1 and status[pos[0]/50] == 0:
        status[pos[0]/50] = 1
        openedcard2 = pos[0]/50
        click += 1
        turn += 1
        label.set_text("Turns = " + str(turn))
    elif click == 2 and status[pos[0]/50] == 0:        
        if numbers[openedcard1] != numbers[openedcard2]:
            status[openedcard1] = 0
            status[openedcard2] = 0
        status[pos[0]/50] = 1
        openedcard1 = pos[0]/50
        openedcard2 = -1
        click = 1    

# cards are logically 50x100 pixels in size    
def draw(canvas):
    global numbers
    for i in range(0,16):
        if status[i] == 0 :
            canvas.draw_line((50*i, 0), (50*i+48, 0), 200, 'Green')
        else:
            canvas.draw_text(str(numbers[i]), [(50*i)+10,70], 60, 'white' )

# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric