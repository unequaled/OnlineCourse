# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2,HEIGHT/2]
paddle1_pos = [PAD_WIDTH/2 -1 ,HEIGHT/2 - HALF_PAD_HEIGHT]
paddle2_pos = [WIDTH - PAD_WIDTH + PAD_WIDTH/2 + 1 ,HEIGHT/2 - HALF_PAD_HEIGHT]
paddle1_vel = 0
paddle2_vel = 0
ball_vel = [0,0]
Flag = 1
score1 = 0
score2 = 0
coutner = 1
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball():
    global ball_pos, ball_vel, Flag # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    ball_vel = [random.randint(2,5)*Flag, -random.randint(1,2)]
    Flag *= -1

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel,counter  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = [PAD_WIDTH/2 -1 ,HEIGHT/2 - HALF_PAD_HEIGHT]
    paddle2_pos = [WIDTH - PAD_WIDTH + PAD_WIDTH/2 + 1 ,HEIGHT/2 - HALF_PAD_HEIGHT]
    paddle1_vel = 0
    paddle2_vel = 0
    counter = 1
    spawn_ball()
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
         
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += int(ball_vel[0]*counter)
    ball_pos[1] += int(ball_vel[1]*counter)
    if ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS :        
        ball_vel[0] *= -1
        ball_pos[0] += 2*ball_vel[0]
        print paddle2_pos[1], ball_pos[1]
        if paddle2_pos[1] > ball_pos[1] or paddle2_pos[1] + PAD_HEIGHT < ball_pos[1]:            
            score1 += 1
            new_game()
    elif ball_pos[0] < PAD_WIDTH + BALL_RADIUS:
        ball_vel[0] *= -1
        ball_pos[0] += 2*ball_vel[0]
        if paddle1_pos[1] > ball_pos[1] or paddle1_pos[1] + PAD_HEIGHT < ball_pos[1]:            
            score2 += 1
            new_game()
    if ball_pos[1] >= HEIGHT -BALL_RADIUS:
        ball_vel[1] *= -1
        ball_pos[1] += 2*ball_vel[1]
    elif ball_pos[1] < BALL_RADIUS:
        ball_vel[1] *= -1
        ball_pos[1] += 2*ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[1] += paddle1_vel
    paddle2_pos[1] += paddle2_vel
    if paddle1_pos[1] > HEIGHT - PAD_HEIGHT:
        paddle1_pos[1] = HEIGHT - PAD_HEIGHT
    elif paddle1_pos[1] < 0:
        paddle1_pos[1] = 0
    if paddle2_pos[1] > HEIGHT - PAD_HEIGHT:
        paddle2_pos[1] = HEIGHT - PAD_HEIGHT
    elif paddle2_pos[1] < 0:
        paddle2_pos[1] = 0  
     
    # draw paddles
    canvas.draw_line(paddle1_pos, [paddle1_pos[0], paddle1_pos[1]+PAD_HEIGHT], PAD_WIDTH , "White")
    canvas.draw_line(paddle2_pos, [paddle2_pos[0], paddle2_pos[1]+PAD_HEIGHT], PAD_WIDTH  , "White")
    
    # draw scores
    canvas.draw_text(str(score1), [WIDTH/4, HEIGHT/4], 20, "White")
    canvas.draw_text(str(score2), [WIDTH*3/4, HEIGHT/4], 20, "White")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == 38:
        paddle2_vel = -5
    elif key == 40:
        paddle2_vel = 5
    elif key == 87:
        paddle1_vel = -5
    elif key == 83:
        paddle1_vel = 5
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == 38:
        paddle2_vel = 0
    elif key == 40:
        paddle2_vel = 0
    elif key == 87:
        paddle1_vel = 0
    elif key == 83:
        paddle1_vel = 0

def timer_handler():
    global counter 
    counter = counter * 1.03
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
timer = simplegui.create_timer(1000, timer_handler)
timer.start()

# start frame
new_game()
frame.start()