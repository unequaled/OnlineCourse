# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.card_list = []

    def __str__(self):
        string = ""
        for l in self.card_list:
            string += str(l) + " "
        return "Hand contains " + string        

    def add_card(self, card):
        self.card_list.append(card)

    def get_value(self):
        hand_value = 0
        is_A = False
        for l in self.card_list:
            if VALUES[l.get_rank()] == 1:
                is_A = True
            hand_value += VALUES[l.get_rank()]
        if is_A and hand_value + 10 <= 21:
            return hand_value + 10
        else:
            return hand_value
   
    def draw(self, canvas, pos):
        posx = pos[0]        
        for l in self.card_list: 
            l.draw(canvas, (posx,pos[1]))
            posx += 80
            
# define deck class 
class Deck:
    global SUITS,RANKS
    def __init__(self):
        self.deck = []
        for x in SUITS:
            for y in RANKS:
                self.deck.append(Card(x,y))

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        print len(self.deck)
        temp = self.deck[len(self.deck)-1]
        self.deck.pop(len(self.deck)-1)
        return temp
    
    def __str__(self):
        string = ""
        for z in self.deck:
            string += str(z) + " "
        return string

#define event handlers for buttons

game_deck = Deck()
dealer = Hand()
player = Hand()

def deal():
    global outcome, in_play, game_deck, dealer, player
    
    game_deck = Deck()
    game_deck.shuffle()
    
    dealer = Hand()
    dealer.add_card(game_deck.deal_card())
    dealer.add_card(game_deck.deal_card())
    
    player = Hand()
    player.add_card(game_deck.deal_card())
    player.add_card(game_deck.deal_card())
    
    outcome = ""
    in_play = True

def hit():
    global outcome, score, in_play, game_deck, dealer, player
    if in_play:
        player.add_card(game_deck.deal_card())
    if player.get_value() > 21:
        print "Player value:" + str(player.get_value())
        in_play = False
        score -= 1
        outcome = "You lose."
        
def stand():
    global score, outcome, in_play, game_deck, dealer, player
    if in_play:
        in_play = False
        while dealer.get_value() < player.get_value():        
            dealer.add_card(game_deck.deal_card())
        
        print "dealer value:" + str(dealer.get_value())
    
        if dealer.get_value() <=21:
            outcome = "You lose."
            score -= 1        
        else:
            outcome = "You win."
            score += 1        
        
# draw handler    
def draw(canvas):
    global score, outcome, game_deck, dealer, player
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("BlackJack", (75, 75), 50, 'Black')
    canvas.draw_text("Score: " + str(score), (375, 75), 50, 'Black')
    
    canvas.draw_text("Dealer     " + outcome, (55, 175), 35, 'White')
    dealer.draw(canvas, (55,215))
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [55 + CARD_BACK_CENTER[0], 215 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
        canvas.draw_text("Player      Hit or Stand?", (55, 375), 35, 'White')
    
    else:
        canvas.draw_text("Player      New deal?", (55, 375), 35, 'White')
    player.draw(canvas, (55,415))

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric